
#define CT std::complex<T>

#define Def1(T1,T2,C2)\
  template void InstTriLDivEq( \
      VectorView<T1> v1, const ConstUpperTriMatrixView<T2,C2>& m2); \
  template void InstTriLDivEq( \
      VectorView<T1> v1, const ConstLowerTriMatrixView<T2,C2>& m2); \
  template void InstAliasTriLDivEq( \
      VectorView<T1> v1, const ConstUpperTriMatrixView<T2,C2>& m2); \
  template void InstAliasTriLDivEq( \
      VectorView<T1> v1, const ConstLowerTriMatrixView<T2,C2>& m2); \

Def1(T,T,NonConj)
#ifdef TMV_INST_COMPLEX
#ifdef TMV_INST_MIX
Def1(CT,T,NonConj)
#endif
Def1(CT,CT,NonConj)
Def1(CT,CT,Conj)
#endif

#undef Def1

#if 0
#define Def2(T1,C1,T2,C2,T3)\
  template void InstAliasTriLDivVM( \
      const T3 x, const ConstVectorView<T1,C1>& m1, \
      const ConstVectorView<T2,C2>& m2, UpperTriMatrixView<T3> m3); \
  template void InstAliasTriLDivVM( \
      const T3 x, const ConstVectorView<T1,C1>& m1, \
      const ConstVectorView<T2,C2>& m2, LowerTriMatrixView<T3> m3); \

Def2(T,NonConj,T,NonConj,T)
#ifdef TMV_INST_COMPLEX
#ifdef TMV_INST_MIX
Def2(T,NonConj,T,NonConj,CT)
Def2(T,NonConj,CT,NonConj,CT)
Def2(T,NonConj,CT,Conj,CT)
Def2(CT,NonConj,T,NonConj,CT)
Def2(CT,Conj,T,NonConj,CT)
#endif
Def2(CT,NonConj,CT,NonConj,CT)
Def2(CT,NonConj,CT,Conj,CT)
Def2(CT,Conj,CT,NonConj,CT)
Def2(CT,Conj,CT,Conj,CT)
#endif

#undef Def2
#endif

#undef CT
